
Oppgavee_8.4_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000068e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000061a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  0000068e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000068e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000720  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064f  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000022c  00000000  00000000  000014ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  000016d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041c  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ca  00000000  00000000  00001bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001dc6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 30       	cpi	r26, 0x0C	; 12
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  88:	0c 94 0b 03 	jmp	0x616	; 0x616 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z8ADC_initv>:
double analogverdi = 0.0;

// initialize adc
void ADC_init()
{
	DDRC &= ~(1 << PC0); // set PC0 as input
  90:	38 98       	cbi	0x07, 0	; 7
	
	ADMUX = (1 << REFS0);	// set reference selection to AVCC with external capacitor at AREF pin
  92:	80 e4       	ldi	r24, 0x40	; 64
  94:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	ADCSRA = (1 << ADEN) | (1 << ADSC) | (1 << ADATE) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);	// enables  ADC with auto trigger, starts conversion and sets prescaler to clk/128
  98:	8f ee       	ldi	r24, 0xEF	; 239
  9a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  9e:	08 95       	ret

000000a0 <_Z13PWM_init_8bitv>:
}

void PWM_init_8bit()	// initializing PWM 8-bit
{
	DDRD = (1 << PD6);	// set PD6 as output
  a0:	80 e4       	ldi	r24, 0x40	; 64
  a2:	8a b9       	out	0x0a, r24	; 10
	
	TCCR1A = (1 << COM0A1) | (1 << WGM00) | (1 << WGM01);	// set FAST 8-bit PWM, with clear OC0A on compare
  a4:	83 e8       	ldi	r24, 0x83	; 131
  a6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TIMSK0 = (1 << TOIE0);	// set interrupt register to overflow interrupt
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	sei();	// enables external interrupt
  b0:	78 94       	sei
	
	TCCR0B = (1 << CS02) | (1 << CS00);	// set prescaling register to clk/1024
  b2:	85 e0       	ldi	r24, 0x05	; 5
  b4:	85 bd       	out	0x25, r24	; 37
	OCR0A = (dutyCycle/100.0)*255.0;	// set clear on compare value
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	48 ec       	ldi	r20, 0xC8	; 200
  bc:	52 e4       	ldi	r21, 0x42	; 66
  be:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <dutyCycle>
  c2:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <dutyCycle+0x1>
  c6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <dutyCycle+0x2>
  ca:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <dutyCycle+0x3>
  ce:	0e 94 46 01 	call	0x28c	; 0x28c <__divsf3>
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	4f e7       	ldi	r20, 0x7F	; 127
  d8:	53 e4       	ldi	r21, 0x43	; 67
  da:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
  de:	0e 94 b8 01 	call	0x370	; 0x370 <__fixunssfsi>
  e2:	67 bd       	out	0x27, r22	; 39
  e4:	08 95       	ret

000000e6 <main>:
}

int main(void)
{
	ADC_init();	// enables ADC
  e6:	0e 94 48 00 	call	0x90	; 0x90 <_Z8ADC_initv>
	PWM_init_8bit();	// enables FAST PWM 8-bit
  ea:	0e 94 50 00 	call	0xa0	; 0xa0 <_Z13PWM_init_8bitv>
  ee:	ff cf       	rjmp	.-2      	; 0xee <main+0x8>

000000f0 <__vector_21>:
	while(1)
	{
	}
}
ISR(ADC_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	2f 93       	push	r18
  fc:	3f 93       	push	r19
  fe:	4f 93       	push	r20
 100:	5f 93       	push	r21
 102:	6f 93       	push	r22
 104:	7f 93       	push	r23
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
 10a:	af 93       	push	r26
 10c:	bf 93       	push	r27
 10e:	ef 93       	push	r30
 110:	ff 93       	push	r31
analogverdi = static_cast<double>(ADC);	// converts ADC value from uint16_t to double
 112:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 116:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__floatunsisf>
 122:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 126:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
 12a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
 12e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_edata+0x3>
dutyCycle = (analogverdi/1023.0)*100.0;	// converts analogverdi to a 0-100 value (need 0-100 value for existing PWM program)
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	30 ec       	ldi	r19, 0xC0	; 192
 136:	4f e7       	ldi	r20, 0x7F	; 127
 138:	54 e4       	ldi	r21, 0x44	; 68
 13a:	0e 94 46 01 	call	0x28c	; 0x28c <__divsf3>
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	48 ec       	ldi	r20, 0xC8	; 200
 144:	52 e4       	ldi	r21, 0x42	; 66
 146:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
 14a:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <dutyCycle>
 14e:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <dutyCycle+0x1>
 152:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <dutyCycle+0x2>
 156:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <dutyCycle+0x3>
}
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	bf 91       	pop	r27
 160:	af 91       	pop	r26
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	7f 91       	pop	r23
 168:	6f 91       	pop	r22
 16a:	5f 91       	pop	r21
 16c:	4f 91       	pop	r20
 16e:	3f 91       	pop	r19
 170:	2f 91       	pop	r18
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <__vector_16>:
ISR(TIMER0_OVF_vect)
{	
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	cf 92       	push	r12
 188:	df 92       	push	r13
 18a:	ef 92       	push	r14
 18c:	ff 92       	push	r15
 18e:	2f 93       	push	r18
 190:	3f 93       	push	r19
 192:	4f 93       	push	r20
 194:	5f 93       	push	r21
 196:	6f 93       	push	r22
 198:	7f 93       	push	r23
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
	if (dutyCycle < 0.0)	// Prevents dutycycle from decreasing below 100 (causing OCR0A error)
 1a6:	c0 90 08 01 	lds	r12, 0x0108	; 0x800108 <dutyCycle>
 1aa:	d0 90 09 01 	lds	r13, 0x0109	; 0x800109 <dutyCycle+0x1>
 1ae:	e0 90 0a 01 	lds	r14, 0x010A	; 0x80010a <dutyCycle+0x2>
 1b2:	f0 90 0b 01 	lds	r15, 0x010B	; 0x80010b <dutyCycle+0x3>
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	a9 01       	movw	r20, r18
 1bc:	c7 01       	movw	r24, r14
 1be:	b6 01       	movw	r22, r12
 1c0:	0e 94 41 01 	call	0x282	; 0x282 <__cmpsf2>
 1c4:	88 23       	and	r24, r24
 1c6:	4c f4       	brge	.+18     	; 0x1da <__vector_16+0x5e>
		{
			dutyCycle = 0.0;
 1c8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <dutyCycle>
 1cc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <dutyCycle+0x1>
 1d0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <dutyCycle+0x2>
 1d4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <dutyCycle+0x3>
 1d8:	16 c0       	rjmp	.+44     	; 0x206 <__vector_16+0x8a>
		}
	if (dutyCycle > 100.0)// Prevents dutycycle from increasing above 100 (causing OCR0A error)
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	48 ec       	ldi	r20, 0xC8	; 200
 1e0:	52 e4       	ldi	r21, 0x42	; 66
 1e2:	c7 01       	movw	r24, r14
 1e4:	b6 01       	movw	r22, r12
 1e6:	0e 94 99 02 	call	0x532	; 0x532 <__gesf2>
 1ea:	18 16       	cp	r1, r24
 1ec:	64 f4       	brge	.+24     	; 0x206 <__vector_16+0x8a>
		{
			dutyCycle = 100.0;
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	a8 ec       	ldi	r26, 0xC8	; 200
 1f4:	b2 e4       	ldi	r27, 0x42	; 66
 1f6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <dutyCycle>
 1fa:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <dutyCycle+0x1>
 1fe:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <dutyCycle+0x2>
 202:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <dutyCycle+0x3>
		}

	lightConv = (pow(dutyCycle,2)) / (100);	// converts calculated light value to perceived light value
 206:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <dutyCycle>
 20a:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <dutyCycle+0x1>
 20e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <dutyCycle+0x2>
 212:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <dutyCycle+0x3>
 216:	9b 01       	movw	r18, r22
 218:	ac 01       	movw	r20, r24
 21a:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	48 ec       	ldi	r20, 0xC8	; 200
 224:	52 e4       	ldi	r21, 0x42	; 66
 226:	0e 94 46 01 	call	0x28c	; 0x28c <__divsf3>
 22a:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <lightConv>
 22e:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <lightConv+0x1>
 232:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <lightConv+0x2>
 236:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <lightConv+0x3>

	OCR0A = (lightConv/100.0)*255.0;	// updates OCR0A value at every interrupt
 23a:	20 e0       	ldi	r18, 0x00	; 0
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	48 ec       	ldi	r20, 0xC8	; 200
 240:	52 e4       	ldi	r21, 0x42	; 66
 242:	0e 94 46 01 	call	0x28c	; 0x28c <__divsf3>
 246:	20 e0       	ldi	r18, 0x00	; 0
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	4f e7       	ldi	r20, 0x7F	; 127
 24c:	53 e4       	ldi	r21, 0x43	; 67
 24e:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
 252:	0e 94 b8 01 	call	0x370	; 0x370 <__fixunssfsi>
 256:	67 bd       	out	0x27, r22	; 39
}
 258:	ff 91       	pop	r31
 25a:	ef 91       	pop	r30
 25c:	bf 91       	pop	r27
 25e:	af 91       	pop	r26
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	7f 91       	pop	r23
 266:	6f 91       	pop	r22
 268:	5f 91       	pop	r21
 26a:	4f 91       	pop	r20
 26c:	3f 91       	pop	r19
 26e:	2f 91       	pop	r18
 270:	ff 90       	pop	r15
 272:	ef 90       	pop	r14
 274:	df 90       	pop	r13
 276:	cf 90       	pop	r12
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <__cmpsf2>:
 282:	0e 94 24 02 	call	0x448	; 0x448 <__fp_cmp>
 286:	08 f4       	brcc	.+2      	; 0x28a <__cmpsf2+0x8>
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	08 95       	ret

0000028c <__divsf3>:
 28c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <__divsf3x>
 290:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__fp_round>
 294:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__fp_pscB>
 298:	58 f0       	brcs	.+22     	; 0x2b0 <__divsf3+0x24>
 29a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__fp_pscA>
 29e:	40 f0       	brcs	.+16     	; 0x2b0 <__divsf3+0x24>
 2a0:	29 f4       	brne	.+10     	; 0x2ac <__divsf3+0x20>
 2a2:	5f 3f       	cpi	r21, 0xFF	; 255
 2a4:	29 f0       	breq	.+10     	; 0x2b0 <__divsf3+0x24>
 2a6:	0c 94 48 02 	jmp	0x490	; 0x490 <__fp_inf>
 2aa:	51 11       	cpse	r21, r1
 2ac:	0c 94 93 02 	jmp	0x526	; 0x526 <__fp_szero>
 2b0:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__fp_nan>

000002b4 <__divsf3x>:
 2b4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__fp_split3>
 2b8:	68 f3       	brcs	.-38     	; 0x294 <__divsf3+0x8>

000002ba <__divsf3_pse>:
 2ba:	99 23       	and	r25, r25
 2bc:	b1 f3       	breq	.-20     	; 0x2aa <__divsf3+0x1e>
 2be:	55 23       	and	r21, r21
 2c0:	91 f3       	breq	.-28     	; 0x2a6 <__divsf3+0x1a>
 2c2:	95 1b       	sub	r25, r21
 2c4:	55 0b       	sbc	r21, r21
 2c6:	bb 27       	eor	r27, r27
 2c8:	aa 27       	eor	r26, r26
 2ca:	62 17       	cp	r22, r18
 2cc:	73 07       	cpc	r23, r19
 2ce:	84 07       	cpc	r24, r20
 2d0:	38 f0       	brcs	.+14     	; 0x2e0 <__divsf3_pse+0x26>
 2d2:	9f 5f       	subi	r25, 0xFF	; 255
 2d4:	5f 4f       	sbci	r21, 0xFF	; 255
 2d6:	22 0f       	add	r18, r18
 2d8:	33 1f       	adc	r19, r19
 2da:	44 1f       	adc	r20, r20
 2dc:	aa 1f       	adc	r26, r26
 2de:	a9 f3       	breq	.-22     	; 0x2ca <__divsf3_pse+0x10>
 2e0:	35 d0       	rcall	.+106    	; 0x34c <__divsf3_pse+0x92>
 2e2:	0e 2e       	mov	r0, r30
 2e4:	3a f0       	brmi	.+14     	; 0x2f4 <__divsf3_pse+0x3a>
 2e6:	e0 e8       	ldi	r30, 0x80	; 128
 2e8:	32 d0       	rcall	.+100    	; 0x34e <__divsf3_pse+0x94>
 2ea:	91 50       	subi	r25, 0x01	; 1
 2ec:	50 40       	sbci	r21, 0x00	; 0
 2ee:	e6 95       	lsr	r30
 2f0:	00 1c       	adc	r0, r0
 2f2:	ca f7       	brpl	.-14     	; 0x2e6 <__divsf3_pse+0x2c>
 2f4:	2b d0       	rcall	.+86     	; 0x34c <__divsf3_pse+0x92>
 2f6:	fe 2f       	mov	r31, r30
 2f8:	29 d0       	rcall	.+82     	; 0x34c <__divsf3_pse+0x92>
 2fa:	66 0f       	add	r22, r22
 2fc:	77 1f       	adc	r23, r23
 2fe:	88 1f       	adc	r24, r24
 300:	bb 1f       	adc	r27, r27
 302:	26 17       	cp	r18, r22
 304:	37 07       	cpc	r19, r23
 306:	48 07       	cpc	r20, r24
 308:	ab 07       	cpc	r26, r27
 30a:	b0 e8       	ldi	r27, 0x80	; 128
 30c:	09 f0       	breq	.+2      	; 0x310 <__divsf3_pse+0x56>
 30e:	bb 0b       	sbc	r27, r27
 310:	80 2d       	mov	r24, r0
 312:	bf 01       	movw	r22, r30
 314:	ff 27       	eor	r31, r31
 316:	93 58       	subi	r25, 0x83	; 131
 318:	5f 4f       	sbci	r21, 0xFF	; 255
 31a:	3a f0       	brmi	.+14     	; 0x32a <__divsf3_pse+0x70>
 31c:	9e 3f       	cpi	r25, 0xFE	; 254
 31e:	51 05       	cpc	r21, r1
 320:	78 f0       	brcs	.+30     	; 0x340 <__divsf3_pse+0x86>
 322:	0c 94 48 02 	jmp	0x490	; 0x490 <__fp_inf>
 326:	0c 94 93 02 	jmp	0x526	; 0x526 <__fp_szero>
 32a:	5f 3f       	cpi	r21, 0xFF	; 255
 32c:	e4 f3       	brlt	.-8      	; 0x326 <__divsf3_pse+0x6c>
 32e:	98 3e       	cpi	r25, 0xE8	; 232
 330:	d4 f3       	brlt	.-12     	; 0x326 <__divsf3_pse+0x6c>
 332:	86 95       	lsr	r24
 334:	77 95       	ror	r23
 336:	67 95       	ror	r22
 338:	b7 95       	ror	r27
 33a:	f7 95       	ror	r31
 33c:	9f 5f       	subi	r25, 0xFF	; 255
 33e:	c9 f7       	brne	.-14     	; 0x332 <__divsf3_pse+0x78>
 340:	88 0f       	add	r24, r24
 342:	91 1d       	adc	r25, r1
 344:	96 95       	lsr	r25
 346:	87 95       	ror	r24
 348:	97 f9       	bld	r25, 7
 34a:	08 95       	ret
 34c:	e1 e0       	ldi	r30, 0x01	; 1
 34e:	66 0f       	add	r22, r22
 350:	77 1f       	adc	r23, r23
 352:	88 1f       	adc	r24, r24
 354:	bb 1f       	adc	r27, r27
 356:	62 17       	cp	r22, r18
 358:	73 07       	cpc	r23, r19
 35a:	84 07       	cpc	r24, r20
 35c:	ba 07       	cpc	r27, r26
 35e:	20 f0       	brcs	.+8      	; 0x368 <__divsf3_pse+0xae>
 360:	62 1b       	sub	r22, r18
 362:	73 0b       	sbc	r23, r19
 364:	84 0b       	sbc	r24, r20
 366:	ba 0b       	sbc	r27, r26
 368:	ee 1f       	adc	r30, r30
 36a:	88 f7       	brcc	.-30     	; 0x34e <__divsf3_pse+0x94>
 36c:	e0 95       	com	r30
 36e:	08 95       	ret

00000370 <__fixunssfsi>:
 370:	0e 94 78 02 	call	0x4f0	; 0x4f0 <__fp_splitA>
 374:	88 f0       	brcs	.+34     	; 0x398 <__fixunssfsi+0x28>
 376:	9f 57       	subi	r25, 0x7F	; 127
 378:	98 f0       	brcs	.+38     	; 0x3a0 <__fixunssfsi+0x30>
 37a:	b9 2f       	mov	r27, r25
 37c:	99 27       	eor	r25, r25
 37e:	b7 51       	subi	r27, 0x17	; 23
 380:	b0 f0       	brcs	.+44     	; 0x3ae <__fixunssfsi+0x3e>
 382:	e1 f0       	breq	.+56     	; 0x3bc <__fixunssfsi+0x4c>
 384:	66 0f       	add	r22, r22
 386:	77 1f       	adc	r23, r23
 388:	88 1f       	adc	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	1a f0       	brmi	.+6      	; 0x394 <__fixunssfsi+0x24>
 38e:	ba 95       	dec	r27
 390:	c9 f7       	brne	.-14     	; 0x384 <__fixunssfsi+0x14>
 392:	14 c0       	rjmp	.+40     	; 0x3bc <__fixunssfsi+0x4c>
 394:	b1 30       	cpi	r27, 0x01	; 1
 396:	91 f0       	breq	.+36     	; 0x3bc <__fixunssfsi+0x4c>
 398:	0e 94 92 02 	call	0x524	; 0x524 <__fp_zero>
 39c:	b1 e0       	ldi	r27, 0x01	; 1
 39e:	08 95       	ret
 3a0:	0c 94 92 02 	jmp	0x524	; 0x524 <__fp_zero>
 3a4:	67 2f       	mov	r22, r23
 3a6:	78 2f       	mov	r23, r24
 3a8:	88 27       	eor	r24, r24
 3aa:	b8 5f       	subi	r27, 0xF8	; 248
 3ac:	39 f0       	breq	.+14     	; 0x3bc <__fixunssfsi+0x4c>
 3ae:	b9 3f       	cpi	r27, 0xF9	; 249
 3b0:	cc f3       	brlt	.-14     	; 0x3a4 <__fixunssfsi+0x34>
 3b2:	86 95       	lsr	r24
 3b4:	77 95       	ror	r23
 3b6:	67 95       	ror	r22
 3b8:	b3 95       	inc	r27
 3ba:	d9 f7       	brne	.-10     	; 0x3b2 <__fixunssfsi+0x42>
 3bc:	3e f4       	brtc	.+14     	; 0x3cc <__fixunssfsi+0x5c>
 3be:	90 95       	com	r25
 3c0:	80 95       	com	r24
 3c2:	70 95       	com	r23
 3c4:	61 95       	neg	r22
 3c6:	7f 4f       	sbci	r23, 0xFF	; 255
 3c8:	8f 4f       	sbci	r24, 0xFF	; 255
 3ca:	9f 4f       	sbci	r25, 0xFF	; 255
 3cc:	08 95       	ret

000003ce <__floatunsisf>:
 3ce:	e8 94       	clt
 3d0:	09 c0       	rjmp	.+18     	; 0x3e4 <__floatsisf+0x12>

000003d2 <__floatsisf>:
 3d2:	97 fb       	bst	r25, 7
 3d4:	3e f4       	brtc	.+14     	; 0x3e4 <__floatsisf+0x12>
 3d6:	90 95       	com	r25
 3d8:	80 95       	com	r24
 3da:	70 95       	com	r23
 3dc:	61 95       	neg	r22
 3de:	7f 4f       	sbci	r23, 0xFF	; 255
 3e0:	8f 4f       	sbci	r24, 0xFF	; 255
 3e2:	9f 4f       	sbci	r25, 0xFF	; 255
 3e4:	99 23       	and	r25, r25
 3e6:	a9 f0       	breq	.+42     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3e8:	f9 2f       	mov	r31, r25
 3ea:	96 e9       	ldi	r25, 0x96	; 150
 3ec:	bb 27       	eor	r27, r27
 3ee:	93 95       	inc	r25
 3f0:	f6 95       	lsr	r31
 3f2:	87 95       	ror	r24
 3f4:	77 95       	ror	r23
 3f6:	67 95       	ror	r22
 3f8:	b7 95       	ror	r27
 3fa:	f1 11       	cpse	r31, r1
 3fc:	f8 cf       	rjmp	.-16     	; 0x3ee <__floatsisf+0x1c>
 3fe:	fa f4       	brpl	.+62     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 400:	bb 0f       	add	r27, r27
 402:	11 f4       	brne	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 404:	60 ff       	sbrs	r22, 0
 406:	1b c0       	rjmp	.+54     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 408:	6f 5f       	subi	r22, 0xFF	; 255
 40a:	7f 4f       	sbci	r23, 0xFF	; 255
 40c:	8f 4f       	sbci	r24, 0xFF	; 255
 40e:	9f 4f       	sbci	r25, 0xFF	; 255
 410:	16 c0       	rjmp	.+44     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 412:	88 23       	and	r24, r24
 414:	11 f0       	breq	.+4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 416:	96 e9       	ldi	r25, 0x96	; 150
 418:	11 c0       	rjmp	.+34     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 41a:	77 23       	and	r23, r23
 41c:	21 f0       	breq	.+8      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 41e:	9e e8       	ldi	r25, 0x8E	; 142
 420:	87 2f       	mov	r24, r23
 422:	76 2f       	mov	r23, r22
 424:	05 c0       	rjmp	.+10     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 426:	66 23       	and	r22, r22
 428:	71 f0       	breq	.+28     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 42a:	96 e8       	ldi	r25, 0x86	; 134
 42c:	86 2f       	mov	r24, r22
 42e:	70 e0       	ldi	r23, 0x00	; 0
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	2a f0       	brmi	.+10     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 434:	9a 95       	dec	r25
 436:	66 0f       	add	r22, r22
 438:	77 1f       	adc	r23, r23
 43a:	88 1f       	adc	r24, r24
 43c:	da f7       	brpl	.-10     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 43e:	88 0f       	add	r24, r24
 440:	96 95       	lsr	r25
 442:	87 95       	ror	r24
 444:	97 f9       	bld	r25, 7
 446:	08 95       	ret

00000448 <__fp_cmp>:
 448:	99 0f       	add	r25, r25
 44a:	00 08       	sbc	r0, r0
 44c:	55 0f       	add	r21, r21
 44e:	aa 0b       	sbc	r26, r26
 450:	e0 e8       	ldi	r30, 0x80	; 128
 452:	fe ef       	ldi	r31, 0xFE	; 254
 454:	16 16       	cp	r1, r22
 456:	17 06       	cpc	r1, r23
 458:	e8 07       	cpc	r30, r24
 45a:	f9 07       	cpc	r31, r25
 45c:	c0 f0       	brcs	.+48     	; 0x48e <__fp_cmp+0x46>
 45e:	12 16       	cp	r1, r18
 460:	13 06       	cpc	r1, r19
 462:	e4 07       	cpc	r30, r20
 464:	f5 07       	cpc	r31, r21
 466:	98 f0       	brcs	.+38     	; 0x48e <__fp_cmp+0x46>
 468:	62 1b       	sub	r22, r18
 46a:	73 0b       	sbc	r23, r19
 46c:	84 0b       	sbc	r24, r20
 46e:	95 0b       	sbc	r25, r21
 470:	39 f4       	brne	.+14     	; 0x480 <__fp_cmp+0x38>
 472:	0a 26       	eor	r0, r26
 474:	61 f0       	breq	.+24     	; 0x48e <__fp_cmp+0x46>
 476:	23 2b       	or	r18, r19
 478:	24 2b       	or	r18, r20
 47a:	25 2b       	or	r18, r21
 47c:	21 f4       	brne	.+8      	; 0x486 <__fp_cmp+0x3e>
 47e:	08 95       	ret
 480:	0a 26       	eor	r0, r26
 482:	09 f4       	brne	.+2      	; 0x486 <__fp_cmp+0x3e>
 484:	a1 40       	sbci	r26, 0x01	; 1
 486:	a6 95       	lsr	r26
 488:	8f ef       	ldi	r24, 0xFF	; 255
 48a:	81 1d       	adc	r24, r1
 48c:	81 1d       	adc	r24, r1
 48e:	08 95       	ret

00000490 <__fp_inf>:
 490:	97 f9       	bld	r25, 7
 492:	9f 67       	ori	r25, 0x7F	; 127
 494:	80 e8       	ldi	r24, 0x80	; 128
 496:	70 e0       	ldi	r23, 0x00	; 0
 498:	60 e0       	ldi	r22, 0x00	; 0
 49a:	08 95       	ret

0000049c <__fp_nan>:
 49c:	9f ef       	ldi	r25, 0xFF	; 255
 49e:	80 ec       	ldi	r24, 0xC0	; 192
 4a0:	08 95       	ret

000004a2 <__fp_pscA>:
 4a2:	00 24       	eor	r0, r0
 4a4:	0a 94       	dec	r0
 4a6:	16 16       	cp	r1, r22
 4a8:	17 06       	cpc	r1, r23
 4aa:	18 06       	cpc	r1, r24
 4ac:	09 06       	cpc	r0, r25
 4ae:	08 95       	ret

000004b0 <__fp_pscB>:
 4b0:	00 24       	eor	r0, r0
 4b2:	0a 94       	dec	r0
 4b4:	12 16       	cp	r1, r18
 4b6:	13 06       	cpc	r1, r19
 4b8:	14 06       	cpc	r1, r20
 4ba:	05 06       	cpc	r0, r21
 4bc:	08 95       	ret

000004be <__fp_round>:
 4be:	09 2e       	mov	r0, r25
 4c0:	03 94       	inc	r0
 4c2:	00 0c       	add	r0, r0
 4c4:	11 f4       	brne	.+4      	; 0x4ca <__fp_round+0xc>
 4c6:	88 23       	and	r24, r24
 4c8:	52 f0       	brmi	.+20     	; 0x4de <__fp_round+0x20>
 4ca:	bb 0f       	add	r27, r27
 4cc:	40 f4       	brcc	.+16     	; 0x4de <__fp_round+0x20>
 4ce:	bf 2b       	or	r27, r31
 4d0:	11 f4       	brne	.+4      	; 0x4d6 <__fp_round+0x18>
 4d2:	60 ff       	sbrs	r22, 0
 4d4:	04 c0       	rjmp	.+8      	; 0x4de <__fp_round+0x20>
 4d6:	6f 5f       	subi	r22, 0xFF	; 255
 4d8:	7f 4f       	sbci	r23, 0xFF	; 255
 4da:	8f 4f       	sbci	r24, 0xFF	; 255
 4dc:	9f 4f       	sbci	r25, 0xFF	; 255
 4de:	08 95       	ret

000004e0 <__fp_split3>:
 4e0:	57 fd       	sbrc	r21, 7
 4e2:	90 58       	subi	r25, 0x80	; 128
 4e4:	44 0f       	add	r20, r20
 4e6:	55 1f       	adc	r21, r21
 4e8:	59 f0       	breq	.+22     	; 0x500 <__stack+0x1>
 4ea:	5f 3f       	cpi	r21, 0xFF	; 255
 4ec:	71 f0       	breq	.+28     	; 0x50a <__stack+0xb>
 4ee:	47 95       	ror	r20

000004f0 <__fp_splitA>:
 4f0:	88 0f       	add	r24, r24
 4f2:	97 fb       	bst	r25, 7
 4f4:	99 1f       	adc	r25, r25
 4f6:	61 f0       	breq	.+24     	; 0x510 <__stack+0x11>
 4f8:	9f 3f       	cpi	r25, 0xFF	; 255
 4fa:	79 f0       	breq	.+30     	; 0x51a <__stack+0x1b>
 4fc:	87 95       	ror	r24
 4fe:	08 95       	ret
 500:	12 16       	cp	r1, r18
 502:	13 06       	cpc	r1, r19
 504:	14 06       	cpc	r1, r20
 506:	55 1f       	adc	r21, r21
 508:	f2 cf       	rjmp	.-28     	; 0x4ee <__fp_split3+0xe>
 50a:	46 95       	lsr	r20
 50c:	f1 df       	rcall	.-30     	; 0x4f0 <__fp_splitA>
 50e:	08 c0       	rjmp	.+16     	; 0x520 <__stack+0x21>
 510:	16 16       	cp	r1, r22
 512:	17 06       	cpc	r1, r23
 514:	18 06       	cpc	r1, r24
 516:	99 1f       	adc	r25, r25
 518:	f1 cf       	rjmp	.-30     	; 0x4fc <__fp_splitA+0xc>
 51a:	86 95       	lsr	r24
 51c:	71 05       	cpc	r23, r1
 51e:	61 05       	cpc	r22, r1
 520:	08 94       	sec
 522:	08 95       	ret

00000524 <__fp_zero>:
 524:	e8 94       	clt

00000526 <__fp_szero>:
 526:	bb 27       	eor	r27, r27
 528:	66 27       	eor	r22, r22
 52a:	77 27       	eor	r23, r23
 52c:	cb 01       	movw	r24, r22
 52e:	97 f9       	bld	r25, 7
 530:	08 95       	ret

00000532 <__gesf2>:
 532:	0e 94 24 02 	call	0x448	; 0x448 <__fp_cmp>
 536:	08 f4       	brcc	.+2      	; 0x53a <__gesf2+0x8>
 538:	8f ef       	ldi	r24, 0xFF	; 255
 53a:	08 95       	ret

0000053c <__mulsf3>:
 53c:	0e 94 b1 02 	call	0x562	; 0x562 <__mulsf3x>
 540:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__fp_round>
 544:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__fp_pscA>
 548:	38 f0       	brcs	.+14     	; 0x558 <__mulsf3+0x1c>
 54a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__fp_pscB>
 54e:	20 f0       	brcs	.+8      	; 0x558 <__mulsf3+0x1c>
 550:	95 23       	and	r25, r21
 552:	11 f0       	breq	.+4      	; 0x558 <__mulsf3+0x1c>
 554:	0c 94 48 02 	jmp	0x490	; 0x490 <__fp_inf>
 558:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__fp_nan>
 55c:	11 24       	eor	r1, r1
 55e:	0c 94 93 02 	jmp	0x526	; 0x526 <__fp_szero>

00000562 <__mulsf3x>:
 562:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__fp_split3>
 566:	70 f3       	brcs	.-36     	; 0x544 <__mulsf3+0x8>

00000568 <__mulsf3_pse>:
 568:	95 9f       	mul	r25, r21
 56a:	c1 f3       	breq	.-16     	; 0x55c <__mulsf3+0x20>
 56c:	95 0f       	add	r25, r21
 56e:	50 e0       	ldi	r21, 0x00	; 0
 570:	55 1f       	adc	r21, r21
 572:	62 9f       	mul	r22, r18
 574:	f0 01       	movw	r30, r0
 576:	72 9f       	mul	r23, r18
 578:	bb 27       	eor	r27, r27
 57a:	f0 0d       	add	r31, r0
 57c:	b1 1d       	adc	r27, r1
 57e:	63 9f       	mul	r22, r19
 580:	aa 27       	eor	r26, r26
 582:	f0 0d       	add	r31, r0
 584:	b1 1d       	adc	r27, r1
 586:	aa 1f       	adc	r26, r26
 588:	64 9f       	mul	r22, r20
 58a:	66 27       	eor	r22, r22
 58c:	b0 0d       	add	r27, r0
 58e:	a1 1d       	adc	r26, r1
 590:	66 1f       	adc	r22, r22
 592:	82 9f       	mul	r24, r18
 594:	22 27       	eor	r18, r18
 596:	b0 0d       	add	r27, r0
 598:	a1 1d       	adc	r26, r1
 59a:	62 1f       	adc	r22, r18
 59c:	73 9f       	mul	r23, r19
 59e:	b0 0d       	add	r27, r0
 5a0:	a1 1d       	adc	r26, r1
 5a2:	62 1f       	adc	r22, r18
 5a4:	83 9f       	mul	r24, r19
 5a6:	a0 0d       	add	r26, r0
 5a8:	61 1d       	adc	r22, r1
 5aa:	22 1f       	adc	r18, r18
 5ac:	74 9f       	mul	r23, r20
 5ae:	33 27       	eor	r19, r19
 5b0:	a0 0d       	add	r26, r0
 5b2:	61 1d       	adc	r22, r1
 5b4:	23 1f       	adc	r18, r19
 5b6:	84 9f       	mul	r24, r20
 5b8:	60 0d       	add	r22, r0
 5ba:	21 1d       	adc	r18, r1
 5bc:	82 2f       	mov	r24, r18
 5be:	76 2f       	mov	r23, r22
 5c0:	6a 2f       	mov	r22, r26
 5c2:	11 24       	eor	r1, r1
 5c4:	9f 57       	subi	r25, 0x7F	; 127
 5c6:	50 40       	sbci	r21, 0x00	; 0
 5c8:	9a f0       	brmi	.+38     	; 0x5f0 <__mulsf3_pse+0x88>
 5ca:	f1 f0       	breq	.+60     	; 0x608 <__mulsf3_pse+0xa0>
 5cc:	88 23       	and	r24, r24
 5ce:	4a f0       	brmi	.+18     	; 0x5e2 <__mulsf3_pse+0x7a>
 5d0:	ee 0f       	add	r30, r30
 5d2:	ff 1f       	adc	r31, r31
 5d4:	bb 1f       	adc	r27, r27
 5d6:	66 1f       	adc	r22, r22
 5d8:	77 1f       	adc	r23, r23
 5da:	88 1f       	adc	r24, r24
 5dc:	91 50       	subi	r25, 0x01	; 1
 5de:	50 40       	sbci	r21, 0x00	; 0
 5e0:	a9 f7       	brne	.-22     	; 0x5cc <__mulsf3_pse+0x64>
 5e2:	9e 3f       	cpi	r25, 0xFE	; 254
 5e4:	51 05       	cpc	r21, r1
 5e6:	80 f0       	brcs	.+32     	; 0x608 <__mulsf3_pse+0xa0>
 5e8:	0c 94 48 02 	jmp	0x490	; 0x490 <__fp_inf>
 5ec:	0c 94 93 02 	jmp	0x526	; 0x526 <__fp_szero>
 5f0:	5f 3f       	cpi	r21, 0xFF	; 255
 5f2:	e4 f3       	brlt	.-8      	; 0x5ec <__mulsf3_pse+0x84>
 5f4:	98 3e       	cpi	r25, 0xE8	; 232
 5f6:	d4 f3       	brlt	.-12     	; 0x5ec <__mulsf3_pse+0x84>
 5f8:	86 95       	lsr	r24
 5fa:	77 95       	ror	r23
 5fc:	67 95       	ror	r22
 5fe:	b7 95       	ror	r27
 600:	f7 95       	ror	r31
 602:	e7 95       	ror	r30
 604:	9f 5f       	subi	r25, 0xFF	; 255
 606:	c1 f7       	brne	.-16     	; 0x5f8 <__mulsf3_pse+0x90>
 608:	fe 2b       	or	r31, r30
 60a:	88 0f       	add	r24, r24
 60c:	91 1d       	adc	r25, r1
 60e:	96 95       	lsr	r25
 610:	87 95       	ror	r24
 612:	97 f9       	bld	r25, 7
 614:	08 95       	ret

00000616 <_exit>:
 616:	f8 94       	cli

00000618 <__stop_program>:
 618:	ff cf       	rjmp	.-2      	; 0x618 <__stop_program>
